<script>

<%= render "partials/nav" %>

<script type="text/javascript">

    d3.json("http://localhost:3000/api/users", function(root){
    
    var links =[];

    connections(root);

    function connections(people){
      var arr = people;
      var arrleng = arr.length;
      
      for (var i = 0; i < arrleng; i++) {
        // console.log(arr[i]);
        // for(var j = 0; arr[i].deeds.length; i++) {
          // console.log(arr[i].deeds[j]);
          if (arr[i]['referrer'] == null){
            arr[i]['referrer'] = arr[i]['token'];

            links.push({id: arr[i]['id'], source: arr[i], target: arr[i], picture: "http://graph.facebook.com/" + arr[i]['uid'] + "/picture"});
          }
          else {
            links.push({id: arr[i]['id'], source: arr[i], target: arr[i], type: 'suit', picture: "http://graph.facebook.com/" + arr[i]['uid'] + "/picture"});
          };
        // }
        // console.log(arr[i].deeds[0].from_id);
      };
    };
    var nodes = {};
      // Compute the distinct nodes from the links.

    links.forEach(function(link) {
      // console.log(link);
      link.source = nodes[link.source['referrer']] || (nodes[link.source['referrer']] = {name: link.source.name, token: link.source.token, referrer: link.target.referrer});
      link.target = nodes[link.target['token']] || (nodes[link.target['token']] = {name: link.target.name, token: link.target.token, referrer: link.target.referrer});
    });

    var width = 1250,
        height = 590;

    var force = d3.layout.force()
        .nodes(d3.values(nodes))
        .links(links)
        .size([width, height])
        .linkDistance(100)
        .charge(-300)
        .on("tick", tick)
        .start();

    var tip = d3.tip()
      .attr('class', 'd3-tip')
      .offset([-10, 0])
      .html(function(d) {
        return "<img src='" + d.picture + "'><span style='color:white'>" + d.name + "</span>";
    });

    var svg = d3.select("body").append("svg")
        .attr("width", width + "px")
        .attr("height", height + "px");

    svg.call(tip);        
    // Per-type markers, as they don't inherit styles.
    svg.append("defs").selectAll("marker")
        .data(["suit", "licensing", "resolved"])
      .enter().append("marker")
        .attr("id", function(d) { return d; })
        .attr("viewBox", "0 -5 10 10")
        .attr("refX", 15)
        .attr("refY", -1.5)
        .attr("markerWidth", 6)
        .attr("markerHeight", 6)
        .attr("orient", "auto")
      .append("path")
        .attr("d", "M0,-5L10,0L0,5");

    var path = svg.append("g").selectAll("path")
        .data(force.links())
      .enter().append("path")
        .attr("class", function(d) { return "link " + d.type; })
        .attr("marker-end", function(d) {   return "url(#" + d.type + ")"; });

    var circle = svg.append("g").selectAll("circle")
        .data(force.nodes())
      .enter().append("circle")
        .attr("r", "8px")
        .style("fill", "white")
        .on('mouseover', function(d, nodes){ 
               d3.select(this)
                .attr("r", "20px")
                .style("fill", "red")
                  .on('click', function(){
                    var node = force.nodes();
                    var group = [];

                    for(i = 0; i < node.length; i++){
                      if (node[i]['referrer'] == d.token) {
                        group.push(node[i]);
                      }

                    d3.selectAll("circle")
                      .data(force.nodes())
                      .style("fill", "black");
                    };
                    // console.log(group);
                  })
                tip.show(d);
                console.log(d.picture);
        })

        .on('mouseout', function(d){
          d3.select(this)
            .attr("r", "8px")
            .style("fill", "white")
            tip.hide(d)
            // .attr("xlink:href", "url(http://graph.facebook.com/10202438725968492/picture)");
        })
        .call(force.drag);

    var text = svg.append("g").selectAll("text")
        .data(force.nodes())
      .enter().append("text")
        .attr("x", 0)
        .attr("y", 0)
        // .style("fill", });
        // .text(function(d) { return ad.name; });

    // Use elliptical arc path segments to doubly-encode directionality.
    function tick() {
      path.attr("d", linkArc);
      circle.attr("transform", transform);
      text.attr("transform", transform);
    }

    function linkArc(d) {
      var dx = d.target.x - d.source.x, 
          dy = d.target.y - d.source.y,
          dr = Math.sqrt(dx * dx + dy * dy);
      return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
    }

    function transform(d) {
      return "translate(" + d.x + "," + d.y + ")";
    }
  });

</script>